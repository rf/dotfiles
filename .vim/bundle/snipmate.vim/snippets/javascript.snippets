# Prototype
snippet method
	// ## $2
	// ${4:description}
	${1:class}.prototype.${2:method} = function (${3:arguments}) {
		var self = this;
		${5:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# constructor
snippet cons
	// # $1
	// ${3:description}
	function ${1:class} (${2:arguments}) {
		var self = this;
		${4:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${2}
	}${3:);}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	}

	else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
		break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {
		${3:// body}
	}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# event listener
snippet addl
	addEventListener('${1:event_name}', function (event) {
		${2:// body}
	});
snippet onl
	on('${1:event_name}', function (event) {
		${2:// body}
	});
snippet on
	on('${1:event_name}', ${2:function}.bind(${3:bound_to}));
# event listener, not lambda
snippet add
	addEventListener('${1:event_name}', ${2:function}.bind(${3:bound_to}));
snippet iife
	(function () {

	${1://body}

	}());
snippet log
	console.log("${1:stuff}");
snippet logvar
	console.log("${1:varname}:", $1);
snippet req
	var ${1:varname} = require("${2:filename}");

snippet desc
	util.describe(${1:this});

snippet self
	var self = this;

snippet {
	{
		${1: // body}
	}
snippet [
	[
		${1: // body}
	]
snippet forin
	for (var ${1:item} in ${2:collection}) {
		${3:// body}
	}
snippet forinhas
	for (var ${1:item} in ${2:collection}) if ($2.hasOwnProperty($1) {
		${3:// body}
	}
snippet eif
	else if (${1:condition}) {
		${2:body}
	}
snippet try
	try {
		${1:// body}
	}

	catch (e) {
		${2:// handle errors}
	}
snippet export
	function ${1:name} (${2:arguments}) {
		${3:// body}
	}

	exports.$1 = $1;
snippet map
	map(function (item) { 
		${1:/* body */} 
	});
snippet filter
	filter(function (item) { 
		${1:/* body */} 
	});
snippet every
	every(function (item) { 
		${1:/* body */} 
	});
snippet some
	some(function (item) { 
		${1:/* body */} 
	});
snippet reduce
	reduce(function (memo, item) { 
		${1:/* body */}
	}, ${2:[]});
snippet keysfor
	Object.keys(${1:collection}).forEach(function (item) {
		${2:// body}
	});
