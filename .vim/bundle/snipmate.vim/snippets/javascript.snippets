# Prototype
snippet m
	${1:class}.prototype.${2:method} = function $2(${3:arguments}) {
		var self = this;
		${4:// body...}
	};${5}
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${4:// body...}
	}${5}
# constructor
snippet cl
	function ${1:class}(${2:options}) {
		if (!(this instanceof $1)) {
			return new Error('Must call $1 constructor with new');
		}
		var self = this;

		${3:// body...}
	}${4}
# Anonymous Function
snippet f
	function (${1}) {
		${2}
	}${3:);}
# if
snippet if
	if (${1:true}) {
		${2}
	}${3}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	}

	else {
		${3}
	}${4}
snippet elif
	else if (${1:true}) {
		${2}
	}${3}
snippet el
	else {
		${1}
	}${2}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
		break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {
		${3:// body}
	}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# event listener
snippet addl
	addEventListener('${1:event_name}', function (event) {
		${2:// body}
	});${3}
snippet onl
	on('${1:event_name}', function (event) {
		${2:// body}
	});${3}
snippet on
	on('${1:event_name}', ${2:function}.bind(${3:bound_to}));${4}
# event listener, not lambda
snippet add
	addEventListener('${1:event_name}', ${2:function}.bind(${3:bound_to}));${4}
snippet iife
	(function () {

	${1://body}

	}());
snippet log
	console.log('${1:stuff}');
snippet logvar
	console.log('${1:varname}:', $1);
snippet req
	var ${1:varname} = require('${2:filename}');
	${3}
snippet desc
	util.describe(${1:this});
	${2}
snippet self
	var self = this;
	${1}
snippet {
	{
		${1: // body}
	}
snippet [
	[
		${1: // body}
	]
snippet forin
	for (var ${1:item} in ${2:collection}) {
		${3:// body}
	}
snippet forinhas
	for (var ${1:item} in ${2:collection}) if ($2.hasOwnProperty($1) {
		${3:// body}
	}
snippet eif
	else if (${1:condition}) {
		${2:body}
	}
snippet try
	try {
		${1:// body}
	}

	catch (e) {
		${2:// handle errors}
	}
snippet export
	function ${1:name} (${2:arguments}) {
		${3:// body}
	}

	exports.$1 = $1;
snippet map
	map(function (item) { 
		${1:/* body */} 
	});
snippet filter
	filter(function (item) { 
		${1:/* body */} 
	});
snippet every
	every(function (item) { 
		${1:/* body */} 
	});
snippet some
	some(function (item) { 
		${1:/* body */} 
	});
snippet reduce
	reduce(function (memo, item) { 
		${2:/* body */}
	}, ${1:[]});
snippet keysfor
	Object.keys(${1:collection}).forEach(function (item) {
		${2:// body}
	});
snippet ievery
	every(function (item) { return ${1:condition}; })
snippet isome
	some(function (item) { return ${1:condition}; })
snippet forEach
	forEach(function (item) {
		${1:// body}	
	});
snippet main
	if (module === require.main) {
		${1:// code}
	}
snippet MIT
	// Copyright (c) 2015 ${1:Uber Technologies, Inc.}

	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE.
	${2}
snippet strict
	'use strict';
snippet at
	assert(
		typeof ${1:thing} === '${2:type}',
		'expected ${3:options.}$1 to be $2'
	);
	${4}
snippet catd
	self.${1:name} = options.$1 || ${2:default};
	assert(
		typeof self.$1 === '${3:type}',
		'expected options.$1 to be $3, instead got ' + typeof options.$1
	);
	${4}
snippet cat
	self.${1:name} = options.$1;
	assert(
		typeof self.$1 === '${2:type}',
		'expected options.$1 to be $2, instead got ' + typeof options.$1
	);
	${3}
snippet cad
	self.${1:name} = options.$1 || ${2:default};
	assert(
		${3:assertion},
		'expected ${4:expected}'
	);
	${4}
snippet ca
	self.${1:name} = options.$1;
	assert(
		${2:assertion},
		'expected ${3:expected}'
	);
	${4}
